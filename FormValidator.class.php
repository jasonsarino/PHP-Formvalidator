<?php
/**
 * @package Form Class
 * @author  Website Development Team
 * @license Research Data and Media Group Inc
 */
class FormValidator extends Sanitizer
{
    // Form isValid checking
    protected $valid = 0;
    
    // Holds error generated by the methods
    protected $error = array();
    
    // Stops the validation when set to 1
    protected $stop = 0;
    
    // Holds the field data with array items for easy validation
    public $data = array();
    
    // Holds the $_POST data
    public $dataFields = array();
    
    /**
     * Holds all the error message
     * @var array $errorMessage
     */
    private $errorMessage = array(
        'alpha'             =>  "The {field} field may only contain alphabetical characters.",   
        'alphaS'            =>  "The {field} field may only contain alphabetical characters and space.",
        'alphaNum'          =>  "The {field} field may only contain alpha-numeric characters.",
        'alphaNumS'         =>  "The {field} field may only contain alpha-numeric characters and space.",
        'alphaNumSymbol'    =>  "The {field} field may only contain alpha-numeric characters and symbols.",
        'alphaNumSymbolS'   =>  "The {field} field may only contain alpha-numeric characters and symbols and space.",
        'dateFormat'        =>  "The {field} field may only contain date format.",
        'email'             =>  "The {field} field may only contain valid email address format.",
        'ipAddress'         =>  "The {field} field may only contain a valid IP.",
        'num'               =>  "The {field} field may only contain numeric.",
        'numS'              =>  "The {field} field may only contain numeric and space.",
        'float'             =>  "The {field} field may only contain float.",
        'regxp'             =>  "The {field} field may only contain valid regxp format."
    );           

    /**
     * Check that fields do not have characters other than letters of alphabet
     * @param  string  $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function alpha($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[a-zA-Z]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Check that fields do not have characters other than numbers and space
     * @param  string  $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function alphaS($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[a-zA-Z ]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Check that fields do not have characters other than letters and numbers
     * @param  mixed   $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function alphaNum($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9a-zA-Z]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Check that fields do not have characters other than letters of alphabet, numbers and space
     * @param  mixed   $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function alphaNumS($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9a-zA-Z ]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Check that fields have the matching patterns without space
     * @param  mixed   $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function alphaNumSymbol($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9a-zA-Z\~\`\!\@\#\$\%\^\&\*\(\)\-\_\=\+\[\]\{\}\:\;\'\|\<\,\>\.\/\?]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Check that fields have the matching patterns without space
     * @param  mixed   $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function alphaNumSymbolS($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9a-zA-Z \~\`\!\@\#\$\%\^\&\*\(\)\-\_\=\+\[\]\{\}\:\;\'\|\<\,\>\.\/\?]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Collect the invalid conditions
     * @param  boolean  $forValid  Increments if there is an error
     * @param  string   $forError  Error messages
     */
    function collectError($forValid, $forError)
    {
        $this->stop = 1;
        $this->error[] = $forError;
        
        if ($forValid == FALSE) { $this->valid = $this->valid + 1; }
    }
    
    /**
     * Concat the data
     */
    function concatData()
    {
        $arrParams = array();
        $arrSetRules = array();
        $arrBoth = array();
        
        // First concat values
        foreach ($this->dataFields as $key => $value)
        {
            $arrParams[] = $key .'_____'. $value;
        }
        
        // Second concat values
        foreach ($this->data as $key => $value)
        {
            // Convert the rules to string separated by pipe
            $value['rules'] = implode('|', $value['rules']);
            
            // Remove the errors
            $value['errors'] = 0;
            
            $arrSetRules[] = implode('1v@Lc0r3', $value);
        }
        
        // Concat the first and second values
        for ($i = 0; $i < count($arrParams); $i++)
        {
            $str = explode('_____', $arrParams[$i]);
            
            $arrBoth[$str[0]] = $str[1] .'1v@Lc0r3'. $arrSetRules[$i];
        }
    
        return $arrBoth;
    }
    
    /**
     * Validate date format
     * @param  string  $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function dateFormat($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty 
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9\/\-]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Validate date time format
     * @param  string  $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function dateTimeFormat($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty 
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9\/\-\:]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Validate email address
     * @param  string  $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function email($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty 
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9a-zA-Z\!\#\$\%\&\'\*\+\-\/\=\?\^\_\`\{\|\}\~\@\.\[\]]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Return error message
     */
    function getErrorMessage()
    {
        $err = implode('<br />', $this->error);
        
        $this->error = array();
        
        return $err;
    }
    
    /**
     * Validate ip address
     * @param  string  $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function ipAddress($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9\.\-\:\/\=]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Check if form is valid
     */
    function isValid()
    {
        if ($this->valid > 0) {
            return FALSE;
        } else {
            return TRUE;
        }
    }
    
    /**
     * Log error message
     * @param  string  $level    Log level: 'info', 'primary', 'warning', etc.
     * @param  mixed   $message  Message to log
     */
    function logMessage($level, $message)
    {
        $alert = '
        <div class="alert alert-'. $level .' alert-dismissable">
            <button class="close" data-dismiss="alert" type="button">&times;</button>
            '. $message .'
        </div>';
        
        return $alert;
    }
    
    
    /**
     * Check that fields are not longer than a defined value
     * @param  mixed   $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function maxLen($value, $max, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (strlen($value) > $max) {
            $this->collectError(FALSE, $message);
        } else {
            return $value;
        }
    }
    
    /**
     * Check that fields do not have characters other than numbers
     * @param  int     $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function num($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (is_numeric($value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Check that fields do not have characters other than numbers and space
     * @param  int     $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function numS($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9 ]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Check that fields value if a positive float number
     * @param  int     $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function float($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (filter_var($value, FILTER_VALIDATE_FLOAT) && $value > 0) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Check that the fields meet a particular regular expression
     * @param  mixed   $value       Value to be checked
     * @param  string  $expression  Regular expression
     * @param  string  $message     Message to show on false conditions
     */
    function regxp($value, $expression, $message) 
    {
        $value = $this->trimmer($value);
        $expression = $this->trimmer($expression);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match($expression, $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
    
    /**
     * Required field
     * @param  mixed   $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function required($value, $message)
    {
        $value = $this->trimmer($value);
        
        if (empty($value) || $value == '') {
            $this->collectError(FALSE, $message);
        } else {
            return $value;
        }
    }
    
    /**
     * Set fields data from array
     * @param  array  $post  The field from the $_POST
     */
    function setData($post=array())
    {
        $this->dataFields = $post;
    }
    
    /**
     * Set field rules
     * @param  mixed   $field       The form field name
     * @param  string  $string      The label of the field in the form
     * @param  array   $rules       The set of rules that the data will go through
     * @param  array   $errors      The error message of the given rules
     * @param  string  $expression  The pattern to be use for regxp() [Optional]
     */
    function setRules($field, $label = '', $rules=array(), $errors=array(), $expression='')
    {
        if (!is_array($rules)) {
            $rules = explode('|', $rules);
        }
        
        $this->data[$field] = array(
            'field'  => $field,
            'label'  => $label,
            'rules'  => $rules,
            'errors' => $errors,
            'expression' => $expression
        );
    }
    
    /**
     * Validate fields data for rules
     */
    function validateData()
    {
        // Loop through the data from setData
        foreach ($this->data as $data)
        {
            $value = $this->dataFields[$data['field']];
            
            // Loop through the rules
            foreach ($data['rules'] as $rule)
            {
                
                // Check if an error message for that rule exists
                $error = isset($data['errors'][$rule]) ? $data['errors'][$rule] : '';
                
                // If required parameter is found
                if ($rule == 'required')
                {
                    $error = $error != '' ? $error : $data['label'] .' is required';
                    
                    $this->required($value, $error);
                }
                // If maxLen parameter is found
                else if (preg_match('/maxLen/i', $rule))
                {
                    $length = (int) preg_replace('/[^0-9]/', '', $rule);
                    $rule = preg_replace('/[^a-zA-Z]/', '', $rule);
                    
                    // Check if an error exists
                    $error = isset($data['errors'][$rule]) ? $data['errors'][$rule] : $data['label'] .' must not exceed '. $length .' character(s)';
                    
                    $this->maxLen($value, $length, $error);
                }
                else    
                {
                    // $error = $error != '' ? $error : 'Invalid '. $data['label'];
                    $error = $error != '' ? $error : str_replace('{field}', $data['label'], $this->errorMessage[$rule]);
                    
                    // If regxp is used
                    if (isset($data['expression']) && trim($data['expression']) != '') {
                        $this->$rule($value, $data['expression'], $error);
                    } else {
                        $this->$rule($value, $error);
                    }
                }
            }
        }

    }
    
    /**
     * Trim the value for excess spaces and escape the back slashes
     * @param   string  $value The value to be trimmed
     * @return  string
     */
    function trimmer($value)
    {
        return stripslashes(trim($value));
    }
    
    /**
     * Validate username and password
     * @param  string  $value    Value to be checked
     * @param  string  $message  Message to show on false conditions
     */
    function userAuth($value, $message)
    {
        $value = $this->trimmer($value);
        
        // If value is empty
        if (empty($value)) { return $value; }
        
        if (preg_match('/^[0-9a-zA-Z!#$%()*+-.\/=\{|\}~]+$/', $value)) {
            return $value;
        } else {
            $this->collectError(FALSE, $message);
        }
    }
}